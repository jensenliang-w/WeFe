package com.welab.wefe.union.service.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class BloomFilterContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","0cb757600080fd5b505af1158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cef9190810190612c6a565b9050600181121515610d045760009350610d28565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7fd22fb9033b9b4d290a6e3f3ff139198183826a80f0850ac55f195cc8705cf2ca8487604051610d599291906130ee565b60405180910390a183945050505050919050565b6000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600c81526020017f626c6f6f6d5f66696c74657200000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e219190613178565b602060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e739190810190612c41565b94508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f119190810190612bc6565b93508373ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f689190613460565b600060405180830381600087803b158015610f8257600080fd5b505af1158015610f96573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ffe57600080fd5b505af1158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110369190810190612c18565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161108d91906132c2565b600060405180830381600087803b1580156110a757600080fd5b505af11580156110bb573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111149190613381565b600060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663bf2b70a16040805190810160405280600a81526020017f6669785f69645f3031310000000000000000000000000000000000000000000081525085876040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111d4939291906131fa565b602060405180830381600087803b1580156111ee57600080fd5b505af1158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112269190810190612c6a565b91506000905060018212151561123f5760009050611263565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe90505b7f91fa9d6109b9b8b47733f98f4b6858346683ebdf73ba3c2f98b90c0d352f83e1818a8a8a604051611298949392919061311e565b60405180910390a180955050505050509392505050565b600080600080600080600094506112c58961061e565b1515611333577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94507f9a7f95a08114585df56e335cc7d7c8408a6ee0be6f3f2250ef933b4f7e158932858a8a8a604051611323949392919061311e565b60405180910390a18495506118e4565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600c81526020017f626c6f6f6d5f66696c74657200000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113de9190613178565b602060405180830381600087803b1580156113f857600080fd5b505af115801561140c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114309190810190612c41565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114ce9190810190612bc6565b92508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115259190613460565b600060405180830381600087803b15801561153f57600080fd5b505af1158015611553573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115ac919061326d565b600060405180830381600087803b1580156115c657600080fd5b505af11580156115da573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561164257600080fd5b505af1158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061167a9190810190612c18565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116d1919061326d565b600060405180830381600087803b1580156116eb57600080fd5b505af11580156116ff573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117589190613381565b600060405180830381600087803b15801561177257600080fd5b505af1158015611786573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a16040805190810160405280600a81526020017f6669785f69645f3031310000000000000000000000000000000000000000000081525084866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611818939291906131fa565b602060405180830381600087803b15801561183257600080fd5b505af1158015611846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061186a9190810190612c6a565b905060018112151561187f57600094506118a3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b7f9a7f95a08114585df56e335cc7d7c8408a6ee0be6f3f2250ef933b4f7e158932858a8a8a6040516118d8949392919061311e565b60405180910390a18495505b50505050509392505050565b600080600080600080935061191c87600081518110151561190d57fe5b9060200190602002015161061e565b15611987577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93507f5157dc1ab0b55c7621be94a34b2ae4228f7d16e8271628060cc027b1a513b12f848888604051611977939291906130a9565b60405180910390a1839450612038565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600c81526020017f626c6f6f6d5f66696c74657200000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a329190613178565b602060405180830381600087803b158015611a4c57600080fd5b505af1158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a849190810190612c41565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611aea57600080fd5b505af1158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b229190810190612c18565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280600a81526020017f6669785f69645f303131000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bae91906132f7565b600060405180830381600087803b158015611bc857600080fd5b505af1158015611bdc573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886000815181101515611c0b57fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c4d919061342b565b600060405180830381600087803b158015611c6757600080fd5b505af1158015611c7b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886001815181101515611caa57fe5b9060200190","","ffffffff811115612cbf57600080fd5b612ccb84828501612aae565b91505092915050565b600060208284031215612ce657600080fd5b600082015167ffffffffffffffff811115612d0057600080fd5b612d0c84828501612b04565b91505092915050565b600080600060608486031215612d2a57600080fd5b600084013567ffffffffffffffff811115612d4457600080fd5b612d5086828701612aae565b935050602084013567ffffffffffffffff811115612d6d57600080fd5b612d7986828701612aae565b925050604084013567ffffffffffffffff811115612d9657600080fd5b612da286828701612aae565b9150509250925092565b6000612db78261356f565b80845260208401935083602082028501612dd085613562565b60005b84811015612e09578383038852612deb838351612e8c565b9250612df682613590565b9150602088019750600181019050612dd3565b508196508694505050505092915050565b612e23816135bd565b82525050565b612e3281613625565b82525050565b612e4181613637565b82525050565b612e50816135c9565b82525050565b6000612e6182613585565b808452612e75816020860160208601613658565b612e7e8161368b565b602085010191505092915050565b6000612e978261357a565b808452612eab816020860160208601613658565b612eb48161368b565b602085010191505092915050565b6000600d82527f686173685f66756e6374696f6e000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f6578745f6a736f6e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f6669785f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f757064617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f637265617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f646174615f7265736f757263655f6964000000000000000000000000000000006020830152604082019050919050565b6000601182527f7570646174654861736846756e74696f6e0000000000000000000000000000006020830152604082019050919050565b60006020820190506130586000830184612e1a565b92915050565b60006020820190506130736000830184612e47565b92915050565b600060408201905061308e6000830185612e47565b81810360208301526130a08184612dac565b90509392505050565b60006060820190506130be6000830186612e47565b81810360208301526130d08185612dac565b905081810360408301526130e48184612e56565b9050949350505050565b60006040820190506131036000830185612e47565b81810360208301526131158184612e56565b90509392505050565b60006080820190506131336000830187612e47565b81810360208301526131458186612e56565b905081810360408301526131598185612e56565b9050818103606083015261316d8184612e56565b905095945050505050565b600060208201905081810360008301526131928184612e8c565b905092915050565b600060408201905081810360008301526131b48185612e8c565b90506131c36020830184612e29565b9392505050565b600060408201905081810360008301526131e48185612e8c565b90506131f36020830184612e38565b9392505050565b600060608201905081810360008301526132148186612e8c565b90506132236020830185612e38565b6132306040830184612e29565b949350505050565b6000604082019050818103600083015261325181612ec2565b905081810360208301526132658184612e8c565b905092915050565b6000604082019050818103600083015261328681612ec2565b9050818103602083015261329a8184612e56565b905092915050565b600060208201905081810360008301526132bb81612ef9565b9050919050565b600060408201905081810360008301526132db81612ef9565b905081810360208301526132ef8184612e56565b905092915050565b6000604082019050818103600083015261331081612f30565b905081810360208301526133248184612e8c565b905092915050565b6000602082019050818103600083015261334581612f67565b9050919050565b6000604082019050818103600083015261336581612f67565b905081810360208301526133798184612e8c565b905092915050565b6000604082019050818103600083015261339a81612f67565b905081810360208301526133ae8184612e56565b905092915050565b600060208201905081810360008301526133cf81612f9e565b9050919050565b600060408201905081810360008301526133ef81612f9e565b905081810360208301526134038184612e8c565b905092915050565b6000602082019050818103600083015261342481612fd5565b9050919050565b6000604082019050818103600083015261344481612fd5565b905081810360208301526134588184612e8c565b905092915050565b6000604082019050818103600083015261347981612fd5565b9050818103602083015261348d8184612e56565b905092915050565b600060208201905081810360008301526134ae8161300c565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156134d857600080fd5b8060405250919050565b600067ffffffffffffffff8211156134f957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561352157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561354d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60006135de8261359d565b9050919050565b60006135f08261359d565b9050919050565b60006136028261359d565b9050919050565b60006136148261359d565b9050919050565b6000819050919050565b60006136308261359d565b9050919050565b60006136428261359d565b9050919050565b82818337600083830152505050565b60005b8381101561367657808201518184015260208101905061365b565b83811115613685576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e886b27cdf9028dee3ed64b23699f1c68ea7b76432f4ddb2f7f0c1d721eb80b36c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","5af1158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ce69190810190612c6a565b915060009050600182121515610cff5760009050610d23565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe90505b7fb36a4960db7128c065f905021bc6b7ab38c8106c359c6ac8dcd55ed9356c994c818a8a8a604051610d58949392919061311e565b60405180910390a180955050505050509392505050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600c81526020017f626c6f6f6d5f66696c74657200000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e209190613178565b602060405180830381600087803b158015610e3a57600080fd5b505af1158015610e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e729190810190612c41565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ed857600080fd5b505af1158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f109190810190612bc6565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f67919061328d565b600060405180830381600087803b158015610f8157600080fd5b505af1158015610f95573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663d8ac59576040805190810160405280600a81526020017f6669785f69645f30313100000000000000000000000000000000000000000000815250846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161102592919061319a565b602060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110779190810190612bef565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111179190810190612c6a565b1115611126576001935061112b565b600093505b505050919050565b60008060008060008093506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600c81526020017f626c6f6f6d5f66696c74657200000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111e99190613178565b602060405180830381600087803b15801561120357600080fd5b505af1158015611217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061123b9190810190612c41565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156112a157600080fd5b505af11580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112d99190810190612bc6565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611330919061328d565b600060405180830381600087803b15801561134a57600080fd5b505af115801561135e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166309ff42f06040805190810160405280600a81526020017f6669785f69645f30313100000000000000000000000000000000000000000000815250846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113ee92919061319a565b602060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114409190810190612c6a565b90506001811215156114555760009350611479565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7fbd9cffb3c2fee8f78eb1338faa81fd19badc50fceb4a0a6a050f9c0cf356091084876040516114aa9291906130ee565b60405180910390a183945050505050919050565b60008060008060008093506114ea8760008151811015156114db57fe5b90602001906020020151610d6f565b15611555577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93507fcb263a23d186eec891d55f1e0ba96ec8290af8c893d32d644c22dbff0953e51f848888604051611545939291906130a9565b60405180910390a1839450611c06565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600c81526020017f626c6f6f6d5f66696c74657200000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116009190613178565b602060405180830381600087803b15801561161a57600080fd5b505af115801561162e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116529190810190612c41565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116b857600080fd5b505af11580156116cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116f09190810190612c18565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040805190810160405280600a81526020017f6669785f69645f303131000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161177c919061342b565b600060405180830381600087803b15801561179657600080fd5b505af11580156117aa573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48860008151811015156117d957fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161181b9190613258565b600060405180830381600087803b15801561183557600080fd5b505af1158015611849573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb488600181518110151561187857fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118ba91906133c1565b600060405180830381600087803b1580156118d457600080fd5b505af11580156118e8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb488600281518110151561191757fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611959919061336c565b600060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48860038151811015156119b657fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119f891906132e2565b600060405180830381600087803b158015611a1257600080fd5b505af1158015611a26573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a7f9190613480565b600060405180830381600087803b158015611a9957600080fd5b505af1158015611aad573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c06040805190810160405280600a81526020017f6669785f69645f30313100000000000000000000000000000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b3d9291906131ca565b602060405180830381600087803b158015611b5757600080fd5b505af1158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b8f9190810190612c6a565b90506001811415611ba35760009350611bc7565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7fcb263a23d186eec891d55f1e0ba96ec8290af8c893d32d644c22dbff0953e51f848888604051611bfa939291906130a9565b60405180910390a18394505b5050505092915050565b6000606060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600c81526020017f626c6f6f6d5f66696c74657200000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000","","ffffffff811115612cbf57600080fd5b612ccb84828501612aae565b91505092915050565b600060208284031215612ce657600080fd5b600082015167ffffffffffffffff811115612d0057600080fd5b612d0c84828501612b04565b91505092915050565b600080600060608486031215612d2a57600080fd5b600084013567ffffffffffffffff811115612d4457600080fd5b612d5086828701612aae565b935050602084013567ffffffffffffffff811115612d6d57600080fd5b612d7986828701612aae565b925050604084013567ffffffffffffffff811115612d9657600080fd5b612da286828701612aae565b9150509250925092565b6000612db78261356f565b80845260208401935083602082028501612dd085613562565b60005b84811015612e09578383038852612deb838351612e8c565b9250612df682613590565b9150602088019750600181019050612dd3565b508196508694505050505092915050565b612e23816135bd565b82525050565b612e3281613625565b82525050565b612e4181613637565b82525050565b612e50816135c9565b82525050565b6000612e6182613585565b808452612e75816020860160208601613658565b612e7e8161368b565b602085010191505092915050565b6000612e978261357a565b808452612eab816020860160208601613658565b612eb48161368b565b602085010191505092915050565b6000601082527f646174615f7265736f757263655f6964000000000000000000000000000000006020830152604082019050919050565b6000600c82527f757064617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f637265617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000601182527f7570646174654861736846756e74696f6e0000000000000000000000000000006020830152604082019050919050565b6000600d82527f686173685f66756e6374696f6e000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f6669785f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f6578745f6a736f6e0000000000000000000000000000000000000000000000006020830152604082019050919050565b60006020820190506130586000830184612e1a565b92915050565b60006020820190506130736000830184612e47565b92915050565b600060408201905061308e6000830185612e47565b81810360208301526130a08184612dac565b90509392505050565b60006060820190506130be6000830186612e47565b81810360208301526130d08185612dac565b905081810360408301526130e48184612e56565b9050949350505050565b60006040820190506131036000830185612e47565b81810360208301526131158184612e56565b90509392505050565b60006080820190506131336000830187612e47565b81810360208301526131458186612e56565b905081810360408301526131598185612e56565b9050818103606083015261316d8184612e56565b905095945050505050565b600060208201905081810360008301526131928184612e8c565b905092915050565b600060408201905081810360008301526131b48185612e8c565b90506131c36020830184612e29565b9392505050565b600060408201905081810360008301526131e48185612e8c565b90506131f36020830184612e38565b9392505050565b600060608201905081810360008301526132148186612e8c565b90506132236020830185612e38565b6132306040830184612e29565b949350505050565b6000602082019050818103600083015261325181612ec2565b9050919050565b6000604082019050818103600083015261327181612ec2565b905081810360208301526132858184612e8c565b905092915050565b600060408201905081810360008301526132a681612ec2565b905081810360208301526132ba8184612e56565b905092915050565b600060208201905081810360008301526132db81612ef9565b9050919050565b600060408201905081810360008301526132fb81612ef9565b9050818103602083015261330f8184612e8c565b905092915050565b6000604082019050818103600083015261333081612ef9565b905081810360208301526133448184612e56565b905092915050565b6000602082019050818103600083015261336581612f30565b9050919050565b6000604082019050818103600083015261338581612f30565b905081810360208301526133998184612e8c565b905092915050565b600060208201905081810360008301526133ba81612f67565b9050919050565b600060408201905081810360008301526133da81612f9e565b905081810360208301526133ee8184612e8c565b905092915050565b6000604082019050818103600083015261340f81612f9e565b905081810360208301526134238184612e56565b905092915050565b6000604082019050818103600083015261344481612fd5565b905081810360208301526134588184612e8c565b905092915050565b600060208201905081810360008301526134798161300c565b9050919050565b600060408201905081810360008301526134998161300c565b905081810360208301526134ad8184612e56565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156134d857600080fd5b8060405250919050565b600067ffffffffffffffff8211156134f957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561352157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561354d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60006135de8261359d565b9050919050565b60006135f08261359d565b9050919050565b60006136028261359d565b9050919050565b60006136148261359d565b9050919050565b6000819050919050565b60006136308261359d565b9050919050565b60006136428261359d565b9050919050565b82818337600083830152505050565b60005b8381101561367657808201518184015260208101905061365b565b83811115613685576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582006755fa23348489ba03800d50e22021622fba2da337e2f206aad72f5354fa7576c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"data_resource_id\",\"type\":\"string\"}],\"name\":\"selectById\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data_resource_id\",\"type\":\"string\"}],\"name\":\"isExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data_resource_id\",\"type\":\"string\"}],\"name\":\"deleteByDataResourceId\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data_resource_id\",\"type\":\"string\"},{\"name\":\"ext_json\",\"type\":\"string\"},{\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"updateExtJson\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data_resource_id\",\"type\":\"string\"},{\"name\":\"hash_function\",\"type\":\"string\"},{\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"updateHashFuntion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"params\",\"type\":\"string[]\"},{\"name\":\"ext_json\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"params\",\"type\":\"string[]\"},{\"indexed\":false,\"name\":\"ext_json\",\"type\":\"string\"}],\"name\":\"insertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"data_resource_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash_function\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"updateHashFunctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"data_resource_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ext_json\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"updateExtJsonEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"data_resource_id\",\"type\":\"string\"}],\"name\":\"deleteByDataResourceIdEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_SELECTBYID = "selectById";

    public static final String FUNC_ISEXIST = "isExist";

    public static final String FUNC_DELETEBYDATARESOURCEID = "deleteByDataResourceId";

    public static final String FUNC_UPDATEEXTJSON = "updateExtJson";

    public static final String FUNC_UPDATEHASHFUNTION = "updateHashFuntion";

    public static final String FUNC_INSERT = "insert";

    public static final Event INSERTEVENT_EVENT = new Event("insertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEHASHFUNCTIONEVENT_EVENT = new Event("updateHashFunctionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEEXTJSONEVENT_EVENT = new Event("updateExtJsonEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DELETEBYDATARESOURCEIDEVENT_EVENT = new Event("deleteByDataResourceIdEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected BloomFilterContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple2<BigInteger, List<String>> selectById(String data_resource_id) throws ContractException {
        final Function function = new Function(FUNC_SELECTBYID, 
                Arrays.<Type>asList(new Utf8String(data_resource_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<String>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public Boolean isExist(String data_resource_id) throws ContractException {
        final Function function = new Function(FUNC_ISEXIST, 
                Arrays.<Type>asList(new Utf8String(data_resource_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deleteByDataResourceId(String data_resource_id) {
        final Function function = new Function(
                FUNC_DELETEBYDATARESOURCEID, 
                Arrays.<Type>asList(new Utf8String(data_resource_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteByDataResourceId(String data_resource_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEBYDATARESOURCEID, 
                Arrays.<Type>asList(new Utf8String(data_resource_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteByDataResourceId(String data_resource_id) {
        final Function function = new Function(
                FUNC_DELETEBYDATARESOURCEID, 
                Arrays.<Type>asList(new Utf8String(data_resource_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteByDataResourceIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEBYDATARESOURCEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getDeleteByDataResourceIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEBYDATARESOURCEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateExtJson(String data_resource_id, String ext_json, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(new Utf8String(data_resource_id),
                new Utf8String(ext_json),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateExtJson(String data_resource_id, String ext_json, String updated_time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(new Utf8String(data_resource_id),
                new Utf8String(ext_json),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateExtJson(String data_resource_id, String ext_json, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(new Utf8String(data_resource_id),
                new Utf8String(ext_json),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateExtJsonInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateExtJsonOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateHashFuntion(String data_resource_id, String hash_function, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATEHASHFUNTION, 
                Arrays.<Type>asList(new Utf8String(data_resource_id),
                new Utf8String(hash_function),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateHashFuntion(String data_resource_id, String hash_function, String updated_time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEHASHFUNTION, 
                Arrays.<Type>asList(new Utf8String(data_resource_id),
                new Utf8String(hash_function),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateHashFuntion(String data_resource_id, String hash_function, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATEHASHFUNTION, 
                Arrays.<Type>asList(new Utf8String(data_resource_id),
                new Utf8String(hash_function),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateHashFuntionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEHASHFUNTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateHashFuntionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEHASHFUNTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt insert(List<String> params, String ext_json) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(List<String> params, String ext_json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(List<String> params, String ext_json) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, String>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<InsertEventEventResponse> getInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTEVENT_EVENT, transactionReceipt);
        ArrayList<InsertEventEventResponse> responses = new ArrayList<InsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertEventEventResponse typedResponse = new InsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.params = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ext_json = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateHashFunctionEventEventResponse> getUpdateHashFunctionEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEHASHFUNCTIONEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateHashFunctionEventEventResponse> responses = new ArrayList<UpdateHashFunctionEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateHashFunctionEventEventResponse typedResponse = new UpdateHashFunctionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data_resource_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.hash_function = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.updated_time = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateHashFunctionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEHASHFUNCTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateHashFunctionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEHASHFUNCTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateExtJsonEventEventResponse> getUpdateExtJsonEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEXTJSONEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateExtJsonEventEventResponse> responses = new ArrayList<UpdateExtJsonEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateExtJsonEventEventResponse typedResponse = new UpdateExtJsonEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data_resource_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ext_json = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.updated_time = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateExtJsonEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEXTJSONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateExtJsonEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEXTJSONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteByDataResourceIdEventEventResponse> getDeleteByDataResourceIdEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEBYDATARESOURCEIDEVENT_EVENT, transactionReceipt);
        ArrayList<DeleteByDataResourceIdEventEventResponse> responses = new ArrayList<DeleteByDataResourceIdEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteByDataResourceIdEventEventResponse typedResponse = new DeleteByDataResourceIdEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data_resource_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteByDataResourceIdEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEBYDATARESOURCEIDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteByDataResourceIdEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEBYDATARESOURCEIDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static BloomFilterContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new BloomFilterContract(contractAddress, client, credential);
    }

    public static BloomFilterContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(BloomFilterContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class InsertEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public List<String> params;

        public String ext_json;
    }

    public static class UpdateHashFunctionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public String data_resource_id;

        public String hash_function;

        public String updated_time;
    }

    public static class UpdateExtJsonEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public String data_resource_id;

        public String ext_json;

        public String updated_time;
    }

    public static class DeleteByDataResourceIdEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public String data_resource_id;
    }
}
